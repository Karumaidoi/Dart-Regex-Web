/* eslint-disable no-useless-escape */
export const data = [
  {
    name: 'Email Regex',
    image: '‚úâÔ∏è',
    caption: `A regular expression to check whether a String is a valid Email`,
    description:
      'The regular expressions below can be used to validate if a string is an email address and to extract email addresses from a string. This validation method however does not guarantee that the emails validated and extracted actually exist.',
    regex: `RegExp(r'^\S+@\S+\.\S+$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `emailRegex.hasMatch("dart@gmail.com")`,
    to: '/regex',
    notes: `Regex email validation can not fully guarantee that email exists and the message can be delivered. The best way how to know for sure that email is valid is to actually send an email to that address because even paid email validation services do not provide a 100% guarantee for that.`,
  },
  {
    name: 'URL Regex',
    caption: `A regular expression to check whether a String is a valid URL`,
    image: 'üåê',
    description:
      'URL regular expressions can be used to verify if a string has a valid URL format as well as to extract an URL from a string.',
    regex: `RegExp(r'^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{(1, 256)}
                \.[a-zA-Z0-9()]{(1, 6)}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `urlRegex.hasMatch("https://stackoverflow.com/questions/49757486/how-to-use-regex-in-dart")`,
    to: '/regex',
    notes:
      'Regex expressions only cover the most commonly used types of URLs with domain names. If you have some more complex cases you might need a different solution.',
  },

  {
    name: 'Phone Regex',
    caption: `A regular expression to check whether a String is a valid Phone`,
    image: 'üìû',
    description:
      'The regular expressions below can be used to validate if a string is a valid phone number format and to extract a phone number from a string. Please note that this validation can not tell if a phone number actually exists.',
    regex: `RegExp(r'^\+?[1-9][0-9]{7,14}$');`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `phoneRegex.hasMatch("+2547195")`,
    to: '/regex',
    notes: 'Some users might have More complex phone numbers with extensions.',
  },
  {
    name: 'IP Regex',
    caption: `A regular expression to check whether a String is a valid IP`,
    image: 'üì±',
    description:
      'The regular expressions below can be used to validate if a string is a valid IP address format and to extract an IP address from a string. Please note that this validation can not tell if an IP address actually exists.',
    regex: `RegExp(r'^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `ipRegex.hasMatch("192.168.0")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'Date Regex',
    caption: `A regular expression to check whether a String is a valid Date`,
    image: 'üóì',
    description:
      'Date regular expressions can be used to validate if a string has a valid date format and to extract a valid date from a string.',
    regex: `RegExp(r'^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `dateRegex.hasMatch("12/20/2000")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'Number Regex',
    caption: `A regular expression to check whether a String is a valid Number`,
    image: '3Ô∏è‚É£',
    description:
      'Numbers only (or digits only) regular expressions can be used to validate if a string contains only numbers.',
    regex: `RegExp(r'^\d+$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `numberRegex.hasMatch(1)`,
    to: '/regex',
    notes: '',
  },

  {
    name: 'UUID Regex',
    caption: `A regular expression to check whether a String is a valid UUID`,
    image: '#Ô∏è‚É£',
    description:
      'UUID is a 128-bit label used for identifications in computer systems.',
    regex: `RegExp(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `uuidRegex.hasMatch("123e4567-e89b-12d3-a456-426614174000")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'Word Regex',
    caption: `A regular expression to check whether a String is a valid Word`,
    image: '‚úçÔ∏è',
    description:
      'This regular expression can be used to validate that a given string contains only characters in it or extract two words from a given string.',
    regex: `RegExp(r'^\b(?:\w|-)+\b$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `wordRegex.hasMatch("Dart")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'ZIP Regex',
    caption: `A regular expression to check whether a String is a valid ZIP`,
    image: 'ü§ê',
    description:
      'ZIP code (US postal code) regular expression can be used to verify if a given string contains a valid ZIP code or extract ZIP code from a string. Supports both 5-digit and 9-digit (ZIP+4) formats.',
    regex: `RegExp(r'^[0-9]{5}(?:-[0-9]{4})?$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `zipRegex.hasMatch("00100")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'GUID Regex',
    caption: `A regular expression to check whether a String is a valid GUID`,
    image: '‚åò',
    description:
      'GUID is an acronym for Globally Unique Identifier and used for resource identification. The term is generally used instead of UUID when working with Microsoft technologies.',
    regex: `RegExp(r'^(?:\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\}{0,1})$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `guidRegex.hasMatch("51d52cf1-83c9-4f02-b117-703ecb728b74")`,
    to: '/regex',
    notes: '',
  },

  {
    name: 'Password Regex',
    caption: `A regular expression to check whether a String is a valid Password`,
    image: 'ü´£',
    description:
      'Password regular expression can be used to verify that a password provided is strong enough to provide better protection against bot brute force attacks. This method, however, does not guarantee that a password will have enough entropy to be completely safe.',
    regex: `RegExp(r'^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$')`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    code: `passwordRegex.hasMatch("dart@-t")`,
    to: '/regex',
    notes: '',
  },
  {
    name: 'Mac address Regex',
    caption: `A regular expression to check whether a String is a valid Mac address`,
    image: 'üìç',
    description:
      'Mac address is a unique identifier assigned to network interface controllers like WiFi routers, Ethernet controllers, etc. It has a format of six groups of 2 hexadecimal digits separated by dash or colon (e.g. 00:00:5e:00:53:af). Mac address regular expression can be used to validate that a certain string contains mac address or extract mac address from a given string.',
    regex: `RegExp(r'^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})$')`,
    code: `macRegex.hasMatch("00:00:5e:00:53:af")`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    to: '/regex',
    notes: '',
  },
  {
    name: 'Street address Regex',
    caption: `A regular expression to check whether a String is a valid Street address`,
    image: 'üèò',
    description:
      'Usually, it‚Äôs a bad idea to validate street addresses using regular expressions (read below). But in some cases it might make sense and here‚Äôs a regular expression that can help with that',
    regex: `RegExp(r'^(\d{1,}) [a-zA-Z0-9\s]+(\,)? [a-zA-Z]+(\,)? [A-Z]{2} [0-9]{5,6}$')`,
    code: `sreetRegex.hasMatch("3344 W Alameda Avenue, Lakewood, CO 80222")`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    to: '/regex',
    notes: '',
  },
  {
    name: 'SSN Regex',
    caption: `A regular expression to check whether a String is a valid SSN address`,
    image: 'üè°',
    description:
      'SSN stands for social security number and is issued to US citizens, permanent and temporary residents.',
    regex: `RegExp(r'^(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$')`,
    code: `ssnRegex.hasMatch("100-22-3333t")`,
    extraInfoTitle: '',
    extraInfoDesc: '',
    to: '/regex',
    notes:
      'This number has the following rules - consists of 9 digits and usually divided by 3 parts by hyphen (XXX-XX-XXXX) -The first part can not be 000, 666, or between 900-900.Second part can not be 00.Third part can not be 0000',
  },
];
